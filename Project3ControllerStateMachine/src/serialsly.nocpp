#include "hackySerial.h"
#include "state.h"
// #include "Arduino.h"
#define FOSC 16000000 // Clock Speed
#define BAUD 9600
#define MYUBRR FOSC / 16 / BAUD - 1

#define buffer_size 10

unsigned char b[buffer_size]; // buffer for incoming stuff
unsigned char toolongmsg[] = {'t', 'o', 'o', ' ', 'l', 'o', 'n', 'g'};

// for creating a print statement:
// def p(s):
//     print("print((unsigned char){'" + "', '".join(s) + "'}, " + str(len(s)) + ");")
// def p2(s):
//      for c in s: git 
//              print("print_one('" + c + "');")
//      print("println();")


uint8_t b_i; // index, how many characters have been received unsigned char b_t; // first character

Parsed parse()
{
    // b should now be on the form p=1.34\0\0\0\0
    Parsed ret;
    ret.what = b[0];

    double value = 0;
    int tens = 1;
    bool decimal_done = false;
    for (int i = 1; i < buffer_size; i++)
    {
        if (b[i] == '.' || ('0' <= b[i] && b[i] <= '9'))
        {
            if (b[i] == '.')
            {
                decimal_done = true;
                tens = 10;
                continue;
            }
            if (b[i] == 0)
            {
                ret.val = value;
                return ret;
            }
            if (!decimal_done)
            {
                value *= tens;
                value += b[i] - '0';
                tens *= 10;
            }
            else
            {
                value += (double)(b[i] - '0') / tens;
                tens *= 10;
            }
        }
    }
    ret.val = value;
    return ret;
}

void reset_buffer()
{
    for (int i = 0; i< buffer_size; i++)
    {
        b[i] = 0;
    }
    b_i = 0;
}

Context *context;

class Init : public State
    {
    public:
        void on_do() override {}
        void on_entry() override {
            print_one('I');
            print_one('n');
            print_one('i');
            print_one('t');
            println();
        }
        void on_exit() override{}
        void set(Parsed p) override {}
        void cmd(unsigned char C) override {}
    };
class PreOp : public State
    {
    public:
        void on_do() override {}
        void on_entry() override {
            print_one('P');
            print_one('r');
            print_one('e');
            print_one('O');
            print_one('p');
            println();
        }
        void on_exit() override {}
        void set(Parsed p) override {}
        void cmd(unsigned char C) override {}
    };

class Op : public State
    {
    public:
        void on_do() override {}
        void on_entry() override {
            print_one('O');
            print_one('p');
            println();
        }
        void on_exit() override {}
        void set(Parsed p) override {}
        void cmd(unsigned char C) override {}
    };

class Stop : public State
    {
    public:
        void on_do() override {}
        void on_entry() override {
            print_one('S');
            print_one('t');
            print_one('o');
            print_one('p');
            println();
        }
        void on_exit() override {}
        void set(Parsed p) override {}
        void cmd(unsigned char C) override {}
    };

int main(){
    USART_Init(MYUBRR);
    context = new Context(new Init);
    while (true)
    {
        if (USART_receive_ready())
        {
            unsigned char inn = USART_Receive();
            // print_i_ln(inn);
            USART_Transmit(inn);
            if (inn == 8)
            {
                // backspace
                if (b_i > 0)
                    b_i--;
                continue;
            }
            if (b_i >= buffer_size && inn != '\n'){
                println(toolongmsg, sizeof(toolongmsg));
                reset_buffer();
                continue;
            }
            else
            {
                if (inn == '\n')
                {
                    if ('A' <= b[0] && b[0] <= 'Z')
                    {
                        // send command to current state
                        if (b[0] == 'I')
                            context->transition_to(new Init);
                        else if (b[0] == 'P')
                            context->transition_to(new PreOp);
                        else if (b[0] == 'O')
                            context->transition_to(new Op);
                        else if (b[0] == 'S')
                            context->transition_to(new Stop);
                        else
                        {
                            context->cmd(b[0]);
                        }
                        
                    }
                    else if ('a' <= b[0] && b[0] <= 'z')
                    {
                        // send parsed to current state
                        context->set(parse());
                    }
                    reset_buffer();
                }
                else
                {
                    b[b_i++] = inn;
                }
                
            }
        }
    }
}